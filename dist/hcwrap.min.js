"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var isFunction = function isFunction(arg) {
	return typeof arg === "function";
};

var LayerConfig = function () {
	function LayerConfig(typeLiteral) {
		_classCallCheck(this, LayerConfig);

		this._plotOptions = null;
		this._literal = typeLiteral;
	}

	_createClass(LayerConfig, [{
		key: "plotOptions",
		set: function set(options) {
			this._plotOptions = options;
		},
		get: function get() {
			return this._plotOptions;
		}
	}, {
		key: "type",
		get: function get() {
			return this._literal;
		}
	}], [{
		key: "Pie",
		get: function get() {
			return new LayerConfig("pie");
		}
	}, {
		key: "Bar",
		get: function get() {
			return new LayerConfig("bar");
		}
	}, {
		key: "Spline",
		get: function get() {
			return new LayerConfig("spline");
		}
	}]);

	return LayerConfig;
}();

var Layer = function () {
	function Layer(layerConfig, dataSource) {
		_classCallCheck(this, Layer);

		this._config = layerConfig;
		this._dataSource = dataSource;
	}

	_createClass(Layer, [{
		key: "data",
		get: function get() {
			if (isFunction(this._dataSource)) {
				return this._dataSource();
			} else {
				return this._dataSource;
			}
		}
	}, {
		key: "config",
		get: function get() {
			return this._config;
		}
	}]);

	return Layer;
}();

var HCWrap = function () {
	function HCWrap(xLabelSource, yLabelSource) {
		_classCallCheck(this, HCWrap);

		this.layers = [];
		this.xLabelSource = xLabelSource;
		this.yLabelSource = yLabelSource;
	}

	_createClass(HCWrap, [{
		key: "add",
		value: function add(layer) {
			this.layers.push(layer);
		}
	}, {
		key: "hcconfig",
		get: function get() {
			var self = this;
			return {
				xAxis: { categories: function () {
						if (isFunction(self.xLabelSource)) {
							return self.xLabelSource();
						} else {
							return self.xLabelSource || {};
						}
					}() },
				yAxis: function () {
					var result = [function () {
						if (isFunction(self.yLabelSource)) {
							return self.yLabelSource();
						} else {
							return self.yLabelSource || {};
						}
					}()];
					for (var i = 0; i < self.layers.length; i++) {
						var yAxisCount = 0;
						var layer = self.layers[i];
						if (layer.config.yAxis) {
							yAxisCount++;
							layer.yAxisId = yAxisCount;
							result.push(layer.config.yAxis);
						} else {
							layer.yAxisId = 0;
						}
					}
					return result;
				}(),
				series: function () {
					var result = [];
					for (var i = 0; i < self.layers.length; i++) {
						var layer = self.layers[i];
						var ser = {
							type: layer.config.type,
							data: layer.data,
							yAxis: layer.yAxisId
						};
						for (var attrname in layer.config.plotOptions) {
							ser[attrname] = layer.config.plotOptions[attrname];
						}
						result.push(ser);
					}
					return result;
				}()
			};
		}
	}]);

	return HCWrap;
}();
